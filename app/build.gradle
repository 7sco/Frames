/*
 * Copyright (c) 2018. Jahir Fiquitiva
 *
 * Licensed under the CreativeCommons Attribution-ShareAlike
 * 4.0 International License. You may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *    http://creativecommons.org/licenses/by-sa/4.0/legalcode
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

// Determines if the application was built on Continuous Integration Server.
def isCi = System.getenv("CI") == "true"

android {
    compileSdkVersion versions.targetSdk
    buildToolsVersion versions.buildTools

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (isCi) {
                outputFileName = "frames-v${variant.versionName}-${variant.name}-${gitLocalSha()}.apk"
            } else {
                outputFileName = details.appId + "-v${variant.versionName}-${variant.name}.apk"
            }
            println "Created apk: ${outputFile}"
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'GoogleAppIndexingWarning'
    }

    defaultConfig {
        // Include all fields for later usage in developer options menu. Can be accessed via BuildConfig class.
        buildConfigField 'boolean', 'CI', "${isCi}"
        buildConfigField 'String', 'GIT_SHA', "\"${gitLocalSha()}\""

        applicationId details.appGroup + "." + details.appId.toLowerCase() + ".sample"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources false
            proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.pro'
            consumerProguardFiles 'proguard-android-optimize.txt', 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        pickFirst 'META-INF/core_debug.kotlin_module'
        pickFirst 'META-INF/core_release.kotlin_module'
        pickFirst 'META-INF/library_debug.kotlin_module'
        pickFirst 'META-INF/library_release.kotlin_module'
    }
}

dependencies {
    implementation project(path: ':library')
}

// TODO: Remove comment marks if you plan on implementing Firebase Notifications
// apply from: './firebase.gradle'

tasks.whenTaskAdded { task ->
    if (task.name.contains("lint") || task.name.contains("test")) {
        task.enabled = false
    }
}

/**
 * Get SHA of the current commit.
 */
def gitLocalSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}